{"version":3,"sources":["components/Burger/Burger.js","components/Counter/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Burger","props","toppings","map","topping","index","key","className","onClick","Counter","addTopping","filter","length","App","state","setState","removeTopping","targetIndex","_","buildTrifecta","i","push","unshift","chessiness","calculatePrice","unitPrice","cheese","tomato","patty","bunTop","bunBottom","reduce","accum","toFixed","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d4973333.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Burger(props) {\n  return (\n    props.toppings.map((topping, index) => (\n      <div \n        key = {index}\n        className={topping}\n        onClick={() => props.onClick(index)}>\n      </div>\n    ))\n  )\n}\n\nexport default Burger;","import React from 'react';\nimport './Counter.css';\n\nfunction Counter(props) {\n  return (\n    <div className=\"Counter\">\n      <button onClick={() => props.addTopping(props.topping)}>+</button>\n      <output className=\"counter-display\">{props.toppings.filter(topping => topping === props.topping).length}</output>\n      <p>{props.topping === 'bunTop' ? 'top bun' : props.topping === 'bunBottom' ? 'bottom bun' : props.topping}</p>\n    </div>\n  )\n}\n\nexport default Counter;","import React from 'react';\nimport './App.css';\nimport Burger from './components/Burger/Burger';\nimport Counter from './components/Counter/Counter';\n\nclass App extends React.Component {\n  state = {\n    toppings: []\n  }\n\n  addTopping = topping => {\n    this.setState({\n      toppings: [topping, ...this.state.toppings]\n    })\n  }\n\n  removeTopping = targetIndex => {\n    this.setState({\n      toppings: this.state.toppings.filter((_, index) => index !== targetIndex )\n    })\n  }\n\n  buildTrifecta = () => {\n    let toppings = [];\n    for (let i = 0; i < 3; i++) {\n      toppings.push('tomato', 'cheese', 'patty');\n    }\n\n    toppings.unshift('bunTop');\n    toppings.push('bunBottom');\n\n    this.setState({\n      toppings: toppings\n    })\n  }\n\n  chessiness = () => {\n    const { toppings } = this.state;\n\n    if (toppings.filter(topping => topping === 'cheese').length === 2) {\n        return 'Double Cheese';\n    } else if (toppings.filter(topping => topping === 'cheese').length === 3) {\n      return 'Triple Cheese';\n    } else if (toppings.filter(topping => topping === 'cheese').length === 4) {\n      return 'Quadruple Cheese';\n    } else if (toppings.filter(topping => topping === 'cheese').length >= 5) {\n      return 'Maximum Cheese';\n    }\n  }\n\n  calculatePrice = toppings => {\n    const unitPrice = {\n      cheese: 0.80,\n      tomato: 0.60,\n      patty: 1.9,\n      bunTop: 0.0,\n      bunBottom: 0.0\n    }\n\n    let totalPrice = toppings.reduce((accum, topping) => {\n      accum = accum + unitPrice[topping];\n      return accum;\n    }, 0)\n\n    return '$' + totalPrice.toFixed(2);\n  }\n\n  render() {\n    const { toppings } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <aside>\n            <h2>Make your own</h2>\n            <section className=\"counter-wrapper\">\n              <Counter toppings={toppings} topping=\"cheese\" addTopping={this.addTopping} />\n              <Counter toppings={toppings} topping=\"tomato\" addTopping={this.addTopping} />\n              <Counter toppings={toppings} topping=\"patty\" addTopping={this.addTopping} />\n              <Counter toppings={toppings} topping=\"bunTop\" addTopping={this.addTopping} />\n              <Counter toppings={toppings} topping=\"bunBottom\" addTopping={this.addTopping} />\n            </section>\n            <section className=\"special-wrapper\">\n              <h2>Today's Special</h2>\n              <div><button onClick={this.buildTrifecta}>The Melbourne Trifecta</button></div>\n            </section>\n            <section className=\"price-wrapper\">\n              <h2>Total Price:</h2>\n              <h3>{this.calculatePrice(toppings)}</h3>\n            </section>\n          </aside>\n          <main>\n            <section>\n              <h3 className=\"cheese-level\">\n                {this.chessiness()}\n              </h3>\n            </section>\n            <section>\n              <div className=\"burger-wrapper\">\n                <Burger \n                  toppings={toppings} \n                  onClick={this.removeTopping}\n                />\n              </div>\n              <div className=\"plate\"></div>\n            </section>\n          </main>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}